---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: qbit-manage
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.1
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: qbittorrent
      namespace: media
  values:
    controllers:
      main:
        type: cronjob
        cronjob: &cronJobSpec
          schedule: "@hourly"
          timeZone: ${TIMEZONE}
          concurrencyPolicy: Forbid
          successfulJobsHistory: 1
          failedJobsHistory: 1
        containers:
          app:
            env:
              TZ: ${TIMEZONE}
              QBT_CONFIG_DIR: /config
              QBT_RUN: "true"
              QBT_LOG_LEVEL: DEBUG
              QBT_DEBUG: true
              QBT_DRY_RUN: true  # Optional: Simulates actions without applying (e.g., tags/cleanup); remove later for real runs
              QBT_PORT: 80
            envFrom:
              - secretRef:
                  name: qbittorrent-login
            image: &image
              repository: ghcr.io/stuffanthings/qbit_manage
              tag: latest
            resources: &resources
              requests:
                cpu: 50m
                memory: 105M
              limits:
                cpu: 50m
                memory: 105M
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              capabilities: { drop: ["ALL"] }
              readOnlyRootFilesystem: true
        pod: &podSecurityContext
          automountServiceAccountToken: false
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile: { type: RuntimeDefault }
      recheck:
        type: cronjob
        cronjob:
          <<: *cronJobSpec
          schedule: "@daily"
        containers:
          app:
            env:
              TZ: ${TIMEZONE}
              QBT_CONFIG_DIR: /config
              QBT_RECHECK: "true"
              QBT_LOG_LEVEL: DEBUG
              QBT_DEBUG: true
              QBT_DRY_RUN: true  # Optional: Simulates actions without applying (e.g., tags/cleanup); remove later for real runs
              QBT_PORT: 80
            envFrom:
              - secretRef:
                  name: qbittorrent-login
            image: *image
            resources: *resources
            securityContext: *securityContext
        pod: *podSecurityContext
      trim:
        type: cronjob
        cronjob:
          <<: *cronJobSpec
          schedule: "@daily"
        containers:
          app:
            command:
              - sh
              - -c
              - |
                pip install qbittorrent-api && python /config/trim_seeders.py
            env:
              TZ: ${TIMEZONE}
            envFrom:
              - secretRef:
                  name: qbittorrent-login
            image:
              repository: python
              tag: 3.12-slim
            resources: *resources
            securityContext:
              <<: *securityContext
              readOnlyRootFilesystem: false  # Allow pip writes
        pod:
          automountServiceAccountToken: false
          securityContext:
            runAsGroup: 0  # Root group
            runAsNonRoot: false  # Allow root
            runAsUser: 0  # Run as root for pip
            seccompProfile: { type: RuntimeDefault }

    persistence:
      config-dir:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /config
      config-file:
        enabled: true
        type: configMap
        name: qbit-manage-configmap
        globalMounts:
          - path: /config/config.yml
            subPath: config.yml
            readOnly: true
      trim-script:
        enabled: true
        type: configMap
        name: qbittorrent-trim-script
        globalMounts:
          - path: /config/trim_seeders.py
            subPath: trim_seeders.py
      media:
        enabled: true
        existingClaim: nfs-media-pvc
        globalMounts:
          - path: /media
      tmp:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /tmp
