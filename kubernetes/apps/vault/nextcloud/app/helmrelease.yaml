# yaml-language-server: $schema=https://github.com/fluxcd-community/flux2-schemas/raw/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: nextcloud
  namespace: vault
spec:
  interval: 30m
  chart:
    spec:
      chart: nextcloud
      version: 8.0.3
      sourceRef:
        kind: HelmRepository
        name: nextcloud
        namespace: flux-system
      interval: 30m
  dependsOn:
    - name: csi-driver-nfs
      namespace: storage
  install:
    timeout: 15m
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    timeout: 15m
    remediation:
      strategy: rollback
      retries: 3
  valuesFrom:
    - kind: Secret
      name: nextcloud-secret
      valuesKey: nextcloud-values.yaml
      optional: false
  values:
    image:
      repository: nextcloud
      flavor: fpm-alpine
      tag: 32-fpm-alpine
      pullPolicy: IfNotPresent
    nginx:
      enabled: true
    externalDatabase:
      enabled: true
      type: postgresql
      host: postgres-pgbouncer.database.svc.cluster.local
      port: 5432
      database: nextcloud
      user: nextcloud
      sslmode: verify-ca
      ssl:
        enabled: true
        secretName: nextcloud-tls-ca-secret
        caCertKey: ca.crt
      existingSecret:
        enabled: true
        secretName: nextcloud-db-secret
        usernameKey: username
        passwordKey: password
    persistence:
      enabled: true
      existingClaim: nfs-data-pvc
      annotations: {}
      storageClass: ""
      accessMode: ReadWriteMany
      size: 1Gi
    nextcloud:
      host: nextcloud.${SECRET_DOMAIN}
      datadir: /var/www/html/data
      config:
        trusted_domains: nextcloud.${SECRET_DOMAIN}
        trusted_proxies: 10.69.0.0/16 10.96.0.0/16
        overwriteprotocol: https
        overwritehost: nextcloud.${SECRET_DOMAIN}
        memcache.local: \OC\Memcache\APCu
        memcache.distributed: \OC\Memcache\Redis
        memcache.locking: \OC\Memcache\Redis
        redis.host: nextcloud-redis-master  # Internal service name
        redis.port: 6379
      phpConfigs:
            redis-session.ini: |  # Pre-creates the file; entrypoint skips or overwrites harmlessly
              session.save_handler = redis
              session.save_path = "tcp://nextcloud-redis-master:6379?serializer=php"  # No auth since auth.enabled: false
            uploadLimit.ini: |  # Optional
              upload_max_filesize = 16G
              post_max_size = 16G
              max_input_time = 3600
              max_execution_time = 3600
            www.conf: |  # Optional, ensures FPM user/group matches image (33)
              [www]
              user = www-data
              group = www-data
              listen = 127.0.0.1:9000
              pm = dynamic
              pm.max_children = 57
              pm.start_servers = 14
              pm.min_spare_servers = 14
              pm.max_spare_servers = 42
              pm.max_requests = 500
              pm.process_idle_timeout = 10s
      configs:
        custom.config.php: |-
          <?php
          $CONFIG = array (
            'check_data_directory_permissions' => false,  # Skips lock/dir checks
            # Add your other config here if needed (e.g., loglevel: 2)
          );
      securityContext:
        runAsNonRoot: false # allows entrypoint to run as root, drops to UID
      hooks:
        post-installation: |-
          php occ db:add-missing-indices
        post-upgrade: |-
          php occ maintenance:repair --include-expensive
          php occ db:add-missing-indices
          php occ db:add-missing-columns
          php occ db:add-missing-primary-keys
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 3Gi
    cronjob:
      enabled: true
      # Runs every 5m by default
    ingress:
      enabled: true
      className: traefik-internal
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        traefik.ingress.kubernetes.io/router.middlewares: "network-chain-no-auth@kubernetescrd,sticky@kubernetescrd"  # Sticky for HA scaling
      hosts:
        - host: nextcloud.${SECRET_DOMAIN}
          paths:
            - path: /
              pathType: Prefix
      tls:
        - secretName: "${SECRET_DOMAIN/./-}-production-tls"
          hosts:
            - nextcloud.${SECRET_DOMAIN}
    hpa:
      enabled: true
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 80  # Tuned higher for bursty media/file loads
      targetMemoryUtilizationPercentage: 80
    service:
      type: ClusterIP
      port: 80
    # Disable internal DB/Redis for external setup
    mariadb.enabled: false
    postgresql.enabled: false
    redis:
      enabled: true  # Enables Redis for caching/locking to improve performance
      auth:
        enabled: false  # Disable password if not needed
      replica:
        replicaCount: 0
      master:
        persistence:
          enabled: true
          storageClass: nfs-csi  # Or openebs-hostpath for faster local caching
          size: 1Gi
    startupProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 20
      timeoutSeconds: 5
      failureThreshold: 30  # ~10min grace
      successThreshold: 1
    livenessProbe:
      initialDelaySeconds: 120
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    readinessProbe:
      initialDelaySeconds: 60
      periodSeconds: 20
      timeoutSeconds: 5
      failureThreshold: 3
    podSecurityContext:  # Add this block for pod-level (volumes/fsGroup)
      fsGroup: 1001  # Ensures mounted volumes (NFS data, Redis persist) get GID 1001 for NFS compatibility
      fsGroupChangePolicy: "Always"  # Force chown on every mount if needed
      runAsNonRoot: false  # Allow root init pod-wide
      # runAsUser: 0  # Optional: Explicit root start for safety
    # Monitoring
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
    # Optional: App-level backups (daily to complement DB backups)
    # cronjob:
    #   createBackupJob:
    #     enabled: true
    #     schedule: "0 2 * * *"